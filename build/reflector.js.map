{
  "version": 3,
  "file": "reflector.js",
  "sourceRoot": "../src/",
  "sources": [
    "reflector.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###*\r\n# @author Slayvin / http://slayvin.net\r\n###\r\n\r\n{\r\n  Color,\r\n  LinearFilter,\r\n  Matrix4,\r\n  Mesh,\r\n  PerspectiveCamera,\r\n  Plane,\r\n  RGBFormat,\r\n  ShaderMaterial,\r\n  UniformsUtils,\r\n  Vector3,\r\n  Vector4,\r\n  WebGLRenderTarget\r\n} = require 'three'\r\n_Math = require('three').Math\r\n\r\nReflector = (geometry, options) ->\r\n  Mesh.call this, geometry\r\n  @type = 'Reflector'\r\n  scope = this\r\n  options = options or {}\r\n  color = if options.color != undefined then new Color(options.color) else new Color(0x7F7F7F)\r\n  textureWidth = options.textureWidth or 512\r\n  textureHeight = options.textureHeight or 512\r\n  clipBias = options.clipBias or 0\r\n  shader = options.shader or Reflector.ReflectorShader\r\n  recursion = if options.recursion != undefined then options.recursion else 0\r\n  #\r\n  reflectorPlane = new Plane\r\n  normal = new Vector3\r\n  reflectorWorldPosition = new Vector3\r\n  cameraWorldPosition = new Vector3\r\n  rotationMatrix = new Matrix4\r\n  lookAtPosition = new Vector3(0, 0, -1)\r\n  clipPlane = new Vector4\r\n  view = new Vector3\r\n  target = new Vector3\r\n  q = new Vector4\r\n  textureMatrix = new Matrix4\r\n  virtualCamera = new PerspectiveCamera\r\n  parameters = \r\n    minFilter: LinearFilter\r\n    magFilter: LinearFilter\r\n    format: RGBFormat\r\n    stencilBuffer: false\r\n  renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters)\r\n  if !_Math.isPowerOfTwo(textureWidth) or !_Math.isPowerOfTwo(textureHeight)\r\n    renderTarget.texture.generateMipmaps = false\r\n  material = new ShaderMaterial(\r\n    transparent: true\r\n    uniforms: UniformsUtils.clone(shader.uniforms)\r\n    fragmentShader: shader.fragmentShader\r\n    vertexShader: shader.vertexShader)\r\n  material.uniforms['tDiffuse'].value = renderTarget.texture\r\n  material.uniforms['color'].value = color\r\n  material.uniforms['textureMatrix'].value = textureMatrix\r\n  @material.transparent = true\r\n  @material = material\r\n\r\n  @onBeforeRender = (renderer, scene, camera) ->\r\n    if 'recursion' of camera.userData\r\n      if camera.userData.recursion == recursion\r\n        return\r\n      camera.userData.recursion++\r\n    reflectorWorldPosition.setFromMatrixPosition scope.matrixWorld\r\n    cameraWorldPosition.setFromMatrixPosition camera.matrixWorld\r\n    rotationMatrix.extractRotation scope.matrixWorld\r\n    normal.set 0, 0, 1\r\n    normal.applyMatrix4 rotationMatrix\r\n    view.subVectors reflectorWorldPosition, cameraWorldPosition\r\n    # Avoid rendering when reflector is facing away\r\n    if view.dot(normal) > 0\r\n      return\r\n    view.reflect(normal).negate()\r\n    view.add reflectorWorldPosition\r\n    rotationMatrix.extractRotation camera.matrixWorld\r\n    lookAtPosition.set 0, 0, -1\r\n    lookAtPosition.applyMatrix4 rotationMatrix\r\n    lookAtPosition.add cameraWorldPosition\r\n    target.subVectors reflectorWorldPosition, lookAtPosition\r\n    target.reflect(normal).negate()\r\n    target.add reflectorWorldPosition\r\n    virtualCamera.position.copy view\r\n    virtualCamera.up.set 0, 1, 0\r\n    virtualCamera.up.applyMatrix4 rotationMatrix\r\n    virtualCamera.up.reflect normal\r\n    virtualCamera.lookAt target\r\n    virtualCamera.far = camera.far\r\n    # Used in WebGLBackground\r\n    virtualCamera.updateMatrixWorld()\r\n    virtualCamera.projectionMatrix.copy camera.projectionMatrix\r\n    virtualCamera.userData.recursion = 0\r\n    # Update the texture matrix\r\n    textureMatrix.set 0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0\r\n    textureMatrix.multiply virtualCamera.projectionMatrix\r\n    textureMatrix.multiply virtualCamera.matrixWorldInverse\r\n    textureMatrix.multiply scope.matrixWorld\r\n    # Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\r\n    # Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\n    reflectorPlane.setFromNormalAndCoplanarPoint normal, reflectorWorldPosition\r\n    reflectorPlane.applyMatrix4 virtualCamera.matrixWorldInverse\r\n    clipPlane.set reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant\r\n    projectionMatrix = virtualCamera.projectionMatrix\r\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0]\r\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5]\r\n    q.z = -1.0\r\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]\r\n    # Calculate the scaled plane vector\r\n    clipPlane.multiplyScalar 2.0 / clipPlane.dot(q)\r\n    # Replacing the third row of the projection matrix\r\n    projectionMatrix.elements[2] = clipPlane.x\r\n    projectionMatrix.elements[6] = clipPlane.y\r\n    projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias\r\n    projectionMatrix.elements[14] = clipPlane.w\r\n    # Render\r\n    scope.visible = false\r\n    currentRenderTarget = renderer.getRenderTarget()\r\n    currentVrEnabled = renderer.vr.enabled\r\n    currentShadowAutoUpdate = renderer.shadowMap.autoUpdate\r\n    renderer.vr.enabled = false\r\n    # Avoid camera modification and recursion\r\n    renderer.shadowMap.autoUpdate = false\r\n    # Avoid re-computing shadows\r\n    renderer.setRenderTarget renderTarget\r\n    renderer.setClearColor 0x000000\r\n    renderer.clear()\r\n    renderer.render scene, virtualCamera\r\n    renderer.setClearColor 0xffffff\r\n    renderer.vr.enabled = currentVrEnabled\r\n    renderer.shadowMap.autoUpdate = currentShadowAutoUpdate\r\n    renderer.setRenderTarget currentRenderTarget\r\n    # Restore viewport\r\n    viewport = camera.viewport\r\n    if viewport != undefined\r\n      renderer.state.viewport viewport\r\n    scope.visible = true\r\n    return\r\n\r\n  @getRenderTarget = ->\r\n    renderTarget\r\n\r\n  return\r\n\r\nReflector.prototype = Object.create(Mesh.prototype)\r\nReflector::constructor = Reflector\r\nReflector.ReflectorShader =\r\n  uniforms:\r\n    'color': value: null\r\n    'tDiffuse': value: null\r\n    'textureMatrix': value: null\r\n  vertexShader: [\r\n    'uniform mat4 textureMatrix;'\r\n    'varying vec4 vUv;'\r\n    'void main() {'\r\n    '  vUv = textureMatrix * vec4( position, 1.0 );'\r\n    '  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );'\r\n    '}'\r\n  ].join('\\n')\r\n  fragmentShader: [\r\n    'uniform vec3 color;'\r\n    'uniform sampler2D tDiffuse;'\r\n    'varying vec4 vUv;'\r\n    'float blendOverlay( float base, float blend ) {'\r\n    '  return( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );'\r\n    '}'\r\n    'vec3 blendOverlay( vec3 base, vec3 blend ) {'\r\n    '  return vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );'\r\n    '}'\r\n    'void main() {'\r\n    '    vec3 blr  = vec3(0.0);'\r\n    '    float amnt = 0.008;'\r\n    '    blr += 0.026109*texture2DProj( tDiffuse, (vUv.xyz+vec3(-15.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.034202*texture2DProj( tDiffuse, (vUv.xyz+vec3(-13.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.043219*texture2DProj( tDiffuse, (vUv.xyz+vec3(-11.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.052683*texture2DProj( tDiffuse, (vUv.xyz+vec3( -9.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.061948*texture2DProj( tDiffuse, (vUv.xyz+vec3( -7.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.070266*texture2DProj( tDiffuse, (vUv.xyz+vec3( -5.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.076883*texture2DProj( tDiffuse, (vUv.xyz+vec3( -3.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.081149*texture2DProj( tDiffuse, (vUv.xyz+vec3( -1.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.041312*texture2DProj( tDiffuse, (vUv.xyz+vec3(  0.0,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.081149*texture2DProj( tDiffuse, (vUv.xyz+vec3(  1.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.076883*texture2DProj( tDiffuse, (vUv.xyz+vec3(  3.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.070266*texture2DProj( tDiffuse, (vUv.xyz+vec3(  5.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.061948*texture2DProj( tDiffuse, (vUv.xyz+vec3(  7.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.052683*texture2DProj( tDiffuse, (vUv.xyz+vec3(  9.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.043219*texture2DProj( tDiffuse, (vUv.xyz+vec3( 11.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.034202*texture2DProj( tDiffuse, (vUv.xyz+vec3( 13.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr += 0.026109*texture2DProj( tDiffuse, (vUv.xyz+vec3( 15.5*amnt,0.0,0.0)) ).xyz;'\r\n    '    blr /= 0.93423; // renormalize to compensate for the 4 taps I skipped'\r\n    '    vec4 base = texture2DProj( tDiffuse, vUv );'\r\n    '    float alpha = 0.2;'\r\n    '    if(base == vec4(0.0, 0.0, 0.0, 1.0)) {'\r\n    '      alpha = 0.0;'\r\n    '    }'\r\n    '    gl_FragColor = vec4( blendOverlay( blr, color ), alpha );'\r\n    '}'\r\n  ].join('\\n')\r\n\r\nmodule.exports = Reflector"
  ]
}